'use client';

import { useState, useEffect, useRef } from 'react';
import { useSession } from 'next-auth/react';
import './project-manager.css';
import { useRealtimeUpdates } from '@/hooks/useRealtimeUpdates';
import { useNotifications } from '@/hooks/useNotifications';
// Removed DnD Kit imports - using custom mouse-based drag and drop
import { 
  Plus, 
  Search, 
  Inbox, 
  Calendar, 
  Filter, 
  MoreHorizontal, 
  CheckCircle, 
  Circle, 
  Clock, 
  User, 
  Home, 
  GraduationCap, 
  Target, 
  Hash,
  HelpCircle,
  Bell,
  Share2,
  BarChart3,
  Settings,
  Edit,
  Trash2,
  Archive
} from 'lucide-react';
import { isAdmin } from '@/lib/admin-config';

// Types for our data structures;
interface Project {
  _id: string;
  name: string;
  description?: string;
  color: string;
  icon: string;
  ownerId: string;
  members: Array<{
    userId: string;
    role: string;
    joinedAt: string;
  }>;
  createdAt: string;
  updatedAt: string;
  sections?: Section[];
  unassignedTasks?: Task[];

}
interface Section {
  _id: string;
  name: string;
  description?: string;
  position: number;
  projectId: string;
  createdById: string;
  isArchived: boolean;
  createdAt: string;
  updatedAt: string;
  tasks?: Task[];

}
interface Task {
  _id: string;
  title: string;
  description?: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  status: 'not_started' | 'in_progress' | 'completed' | 'on_hold' | 'cancelled';
  dueDate?: string;
  sectionId?: string;
  projectId: string | { _id: string; name: string; color: string; icon: string };
  assignedToId?: string;
  createdById: string;
  labels: Array<{
    name: string;
    color: string;
  }>;
  isCompleted: boolean;
  position: number;
  createdAt: string;
  updatedAt: string;

}
interface Organization {
  _id: string;
  name: string;
  description?: string;
  color: string;
  icon: string;
  ownerId: string;
  members: Array<{
    userId: string;
    role: string;
    joinedAt: string;
  }>;
  settings: {
    allowMemberInvites: boolean;
    defaultProjectVisibility: string;
    timezone: string;
  };
  isActive: boolean;
  isArchived: boolean;
  createdAt: string;
  updatedAt: string;

}
export default function ProjectManager() {
  const { data: session } = useSession();
  const [selectedProject, setSelectedProject] = useState<string | null>(null);
  const [projects, setProjects] = useState<Project[]>([]);
  const [sections, setSections] = useState<Section[]>([]);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddTask, setShowAddTask] = useState(false);
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [newTaskPriority, setNewTaskPriority] = useState<string>('low');
  const [newTaskDueDate, setNewTaskDueDate] = useState('');
  const [selectedSection, setSelectedSection] = useState<string | null>(null);
  const [showAddSection, setShowAddSection] = useState(false);
  const [newSectionName, setNewSectionName] = useState('');
  const [newSectionColor, setNewSectionColor] = useState('#3498db');
  const [showProjectModal, setShowProjectModal] = useState(false);
  const [newProjectName, setNewProjectName] = useState('');
  const [newProjectColor, setNewProjectColor] = useState('#3498db');
  const [newProjectIcon, setNewProjectIcon] = useState('üìÅ');
  const [searchQuery, setSearchQuery] = useState('');
  const [filterPriority, setFilterPriority] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [showFilters, setShowFilters] = useState(false);
  const [realtimeUsers, setRealtimeUsers] = useState<Set<string>>(new Set());
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  const [showNotifications, setShowNotifications] = useState(false);
  const [editingTask, setEditingTask] = useState<string | null>(null);
  const [editTaskTitle, setEditTaskTitle] = useState('');
  const [editTaskPriority, setEditTaskPriority] = useState<string>('low');
  const [editTaskDueDate, setEditTaskDueDate] = useState('');
  
  // Organization state
  const [organizations, setOrganizations] = useState<any[]>([]);
  const [selectedOrganization, setSelectedOrganization] = useState<string | null>(null);
  const [showOrganizationModal, setShowOrganizationModal] = useState(false);
  const [showOrganizationDropdown, setShowOrganizationDropdown] = useState(false);
  const [newOrganizationName, setNewOrganizationName] = useState('');
  const [newOrganizationDescription, setNewOrganizationDescription] = useState('');
  const [newOrganizationColor, setNewOrganizationColor] = useState('#667eea');
  const [newOrganizationIcon, setNewOrganizationIcon] = useState('üè¢');
  
  // Mobile responsive state
  const [sidebarOpen, setSidebarOpen] = useState(false);
  
  // Drag and Drop state
  const [activeTask, setActiveTask] = useState<Task | null></Task>(null);
  const [draggedTask, setDraggedTask] = useState<Task | null></Task>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [dragStartPosition, setDragStartPosition] = useState<{ x: number; y: number } | null>(null);
  const [openSectionMenu, setOpenSectionMenu] = useState<string | null>(null);
  const [currentView, setCurrentView] = useState<'kanban' | 'upcoming'>('kanban');
  
  // Notifications
  const { notifications, unreadCount, markAsRead, markAllAsRead, clearNotification } = useNotifications();
  
  // Removed DnD Kit sensors - using custom mouse-based drag and drop

  const currentProject = projects.find(p => p._id === selectedProject);
  const currentOrganization = organizations.find(o => o._id === selectedOrganization);

  // Fetch organizations for the current user
  const fetchOrganizations = async () => {
    if (!session?.user || !(session.user as any).id) return;
    
    try {
      const response = await fetch(`/api/organizations?userId=${(session.user as any).id}`);
      if (response.ok) {
        const organizationsData = await response.json();
        setOrganizations(organizationsData);
        
        // Auto-select first organization if none selected
        if (!selectedOrganization && organizationsData.length > 0) {
          setSelectedOrganization(organizationsData[0]._id);
    } catch (error) {
      console.error('Error fetching organizations:', error);
  };

  // Task Component (no longer sortable with DnD Kit)
  const TaskComponent = ({ task, onToggle, onEdit, onDelete, isEditing, editTitle, editPriority, editDueDate, onEditChange, onEditSave, onEditCancel }: {
    task: Task;
    onToggle: (id: string) => void;
    onEdit: (id: string) => void;
    onDelete: (id: string) => void;
    isEditing: boolean;
    editTitle: string;
    editPriority: string;
    editDueDate: string;
    onEditChange: (field: string, value: string) => void;
    onEditSave: (id: string) => void;
    onEditCancel: () => void;
  }) => {
    const isCurrentlyDragging = isDragging && activeTask?._id === task._id;

    const getPriorityColor = (priority: string) => {
      switch (priority) {
        case 'urgent': return 'bg-red-500';
        case 'high': return 'bg-orange-500';
        case 'medium': return 'bg-blue-500';
        case 'low': return 'bg-gray-400';
        default: return 'bg-gray-400';
    };

    return (
      <div
        data-task-id={task._id}
        onMouseDown={(e) => handleMouseDown(e, task)}
        className={`mb-2 ${isCurrentlyDragging ? 'dragging opacity-50' : 'cursor-grab active:cursor-grabbing'}`}
        {isEditing ? (
          <div className="bg-white rounded-full border border-gray-200 p-3 shadow-sm">
            <div className="space-y-3">
              <input
                type="text"
                value={editTitle}
                onChange={(e) => onEditChange('title', e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Task title"
                autoFocus
              />
              <div className="flex space-x-2">
                <select
                  value={editPriority}
                  onChange={(e) => onEditChange('priority', e.target.value)}
                  className="flex-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                  <option value="urgent">Urgent</option>
                </select>
                <input
                  type="datetime-local"
                  value={editDueDate}
                  onChange={(e) => onEditChange('dueDate', e.target.value)}
                  className="flex-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={() => onEditSave(task._id)}
                  className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                  Save
                </button>
                <button
                  onClick={onEditCancel}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                  Cancel
                </button>
              </div>
            </div>
          </div>
        ) : (;
          <div className="bg-white rounded-full border border-gray-200 p-3 shadow-sm hover:shadow-md transition-shadow duration-200 cursor-grab active:cursor-grabbing">
            <div className="flex items-center space-x-3">
              {/* Checkbox */}
              <button
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  onToggle(task._id);
                }}
                onMouseDown={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                }}
                className="flex-shrink-0"
                {task.isCompleted ? (
                  <CheckCircle className="w-5 h-5 text-green-500" /></CheckCircle>
                ) : (;
                  <Circle className="w-5 h-5 text-gray-400 hover:text-gray-600" /></Circle>
                )}
              </button>

              {/* Task Content */}
              <div className="flex-1 min-w-0">
                <div className={`text-sm font-medium ${task.isCompleted ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                  {task.title}
                </div>
                {task.dueDate && (
                  <div className="text-xs text-gray-500 mt-1">
                    Due: {new Date(task.dueDate).toLocaleDateString()}
                  </div>
                )}
              </div>

              {/* Priority Indicator */}
              <div className={`w-2 h-2 rounded-full ${getPriorityColor(task.priority)}`}></div>

              {/* Action Buttons */}
              <div className="flex items-center space-x-1">
                <button
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    onEdit(task._id);
                  }}
                  onMouseDown={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                  }}
                  className="p-2 text-gray-500 hover:text-blue-600 rounded-full hover:bg-blue-50 transition-all duration-200"
                  title="Edit task"
                  <Edit className="w-4 h-4" /></Edit>
                </button>
                <button
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üî• Delete button clicked for task:', task._id);
                    onDelete(task._id);
                  }}
                  onMouseDown={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                  }}
                  className="p-2 text-gray-500 hover:text-red-600 rounded-full hover:bg-red-50 transition-all duration-200"
                  title="Delete task"
                  <Trash2 className="w-4 h-4" /></Trash2>
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Simple Section Component (no longer using DnD Kit)
  const SectionComponent = ({ section, children }: { section: Section; children: React.ReactNode }) => {
    const isDragOver = isDragging && activeTask && activeTask.sectionId !== section._id;
    
    return (
      <div
        data-section-id={section._id}
        className={`flex-shrink-0 w-80 ${isDragOver ? 'bg-blue-50 border-2 border-blue-300 border-dashed rounded-lg' : ''}`}
        <div className="section-column p-4 min-h-96">
          {children}
        </div>
      </div>
    );
  };

  // Fetch projects for the current user
  // Fetch projects with all data (sections and tasks) for the current user and organization
  const fetchProjects = async () => {
    if (!session?.user || !(session.user as any).id) {
      console.log('‚ùå No session or user ID, skipping project fetch');
      return;
    
    console.log('üîÑ Fetching projects with data for user:', (session.user as any).id, 'organization:', selectedOrganization);
    
    try {
      let url = `/api/mongo/projects?userId=${(session.user as any).id}`;
      if (selectedOrganization) {
        url += `&organizationId=${selectedOrganization}`;
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-cache',
      });
      
      console.log('üì° Projects API response status:', response.status);
      
      if (response.ok) {
        const projectsData = await response.json();
        console.log('‚úÖ Projects with data fetched successfully:', projectsData.length, 'projects');
        setProjects(projectsData);
        
        // Extract sections and tasks from the first project for now
        if (projectsData.length > 0) {
          const firstProject = projectsData[0];
          setSections(firstProject.sections || []);
          setTasks(firstProject.unassignedTasks || []);
          
          // Auto-select first project if none selected
          if (!selectedProject) {
            console.log('üéØ Auto-selecting first project:', firstProject._id);
            setSelectedProject(firstProject._id);
      } else {
        console.error('‚ùå Failed to fetch projects, status:', response.status);
    } catch (error) {
      console.error('‚ùå Error fetching projects:', error);
  };

  // Removed fetchSections and fetchTasks - now using direct MongoDB API that fetches everything at once

  // Load data on component mount and when project changes
  useEffect(() => {
    if (session?.user && (session.user as any).id) {
      fetchOrganizations();
      fetchProjects();
  }, [session?.user]);

  // Refetch projects when organization changes
  useEffect(() => {
    if (session?.user && (session.user as any).id && selectedOrganization) {
      console.log('üîÑ Organization changed, refetching projects for:', selectedOrganization);
      fetchProjects();
      // Clear selected project when organization changes
      setSelectedProject(null);
  }, [selectedOrganization]);

  // When selectedProject changes, update sections and tasks from the projects data
  useEffect(() => {
    if (selectedProject && projects.length > 0) {
      const currentProject = projects.find(p => p._id === selectedProject);
      if (currentProject) {
        setSections(currentProject.sections || []);
        setTasks(currentProject.unassignedTasks || []);
  }, [selectedProject, projects]);

  // Set loading to false after initial data load
  useEffect(() => {
    if (projects.length > 0 || !session?.user) {
      setLoading(false);
  }, [projects, session?.user]);

  // Removed this useEffect since we now get all data in one call

  // Removed this useEffect to prevent infinite loops
  // Tasks are fetched when selectedProject changes, which is sufficient

  // Temporarily disabled auto-assignment to prevent loops
  // Auto-assign unassigned tasks to the first section
  // useEffect(() => {
  //   if (tasks.length > 0 && sections.length > 0) {
  //     const unassignedTasks = tasks.filter(task => !task.sectionId);
  //     if (unassignedTasks.length > 0) {
  //       console.log('üîÑ Auto-assigning unassigned tasks to first section');
  //       const firstSection = sections[0];
  //       unassignedTasks.forEach(async (task) => {
  //         try {
  //           const response = await fetch(`/api/tasks/${task._id}`, {
  //             method: 'PUT',
  //       headers: {
  //         'Content-Type': 'application/json',
  //       },
  //             body: JSON.stringify({
  //               sectionId: firstSection._id;
  //             }),
  //     });

  //     if (response.ok) {
  //             const updatedTask = await response.json();
  //             setTasks(prev => prev.map(t => t._id === task._id ? updatedTask : t));
  //     }
  //   } catch (error) {
  //           console.error('Error assigning task to section:', error);
  //         }
  //       });
  //     }
  //   }
  // }, [tasks, sections]);

  // Real-time collaboration
  const handleRealtimeUpdate = (update: any) => {
    console.log('üîÑ Real-time update received:', update);
    setLastUpdate(new Date());
    
    switch (update.type) {
      case 'task_created':;
      case 'task_updated':;
        setTasks(prev => {
          const existing = prev.find(t => t._id === update.data._id);
          if (existing) {
            return prev.map(t => t._id === update.data._id ? update.data : t);
          } else {
            return [...prev, update.data];
        });
        break;
      case 'task_deleted':;
        setTasks(prev => prev.filter(t => t._id !== update.data._id));
        break;
      case 'section_created':;
      case 'section_updated':;
        setSections(prev => {
          const existing = prev.find(s => s._id === update.data._id);
          if (existing) {
            return prev.map(s => s._id === update.data._id ? update.data : s);
          } else {
            return [...prev, update.data];
        });
        break;
      case 'section_deleted':;
        setSections(prev => prev.filter(s => s._id !== update.data._id));
        break;
    
    // Track active users
    if (update.userId && update.userId !== (session?.user as any)?.id) {
      setRealtimeUsers(prev => new Set([...prev, update.userId]));
      // Remove user after 30 seconds of inactivity
      setTimeout(() => {
        setRealtimeUsers(prev => {
          const newSet = new Set(prev);
          newSet.delete(update.userId);
          return newSet;
        });
      }, 30000);
  };

  // Temporarily disabled real-time updates to prevent constant fetching
  // useRealtimeUpdates(selectedProject, handleRealtimeUpdate);

  const handleAddTask = async (sectionId: string) => {
    if (!newTaskTitle.trim() || !selectedProject || !session?.user) return;
    
    try {
      const response = await fetch('/api/mongo/tasks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: newTaskTitle.trim(),
          projectId: selectedProject,
          sectionId: sectionId,
          createdById: (session.user as any).id,
          priority: newTaskPriority,
          dueDate: newTaskDueDate || null,
          isCompleted: false;
        }),
      });

      if (response.ok) {
        const newTask = await response.json();
        
        // Add the new task to the appropriate section or unassigned tasks
        if (sectionId) {
          // Add to section
          setSections(prev => prev.map(section => 
            section._id === sectionId 
              ? { ...section, tasks: [...(section.tasks || []), newTask] }
              : section;
          ));
        } else {
          // Add to unassigned tasks
          setTasks(prev => [...prev, newTask]);
        
        setNewTaskTitle('');
        setNewTaskPriority('low');
        setNewTaskDueDate('');
        setSelectedSection(null);
      } else {
        console.error('Failed to create task');
    } catch (error) {
      console.error('Error creating task:', error);
  };

  const handleToggleTask = async (taskId: string) => {
    // Find task in unassigned tasks or sections
    let task = tasks.find(t => t._id === taskId);
    if (!task) {
      // Look in sections
      for (const section of sections) {
        if (section.tasks) {
          task = section.tasks.find(t => t._id === taskId);
          if (task) break;
    
    if (!task) return;

    try {
      const response = await fetch('/api/mongo/tasks', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          taskId: taskId,
          updates: {
            isCompleted: !task.isCompleted,
            status: !task.isCompleted ? 'completed' : 'not_started';
        }),
      });

      if (response.ok) {
        const updatedTask = await response.json();
        
        // Update in unassigned tasks
        setTasks(prev => prev.map(t => t._id === taskId ? updatedTask : t));
        
        // Update in sections
        setSections(prev => prev.map(section => ({
          ...section,
          tasks: section.tasks ? section.tasks.map(t => t._id === taskId ? updatedTask : t) : []
        })));
    } catch (error) {
      console.error('Error updating task:', error);
  };

  const handleEditTask = async (taskId: string) => {
    if (!editTaskTitle.trim()) return;

    try {
      const response = await fetch('/api/mongo/tasks', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          taskId: taskId,
          updates: {
            title: editTaskTitle.trim(),
            priority: editTaskPriority,
            dueDate: editTaskDueDate || null;
        }),
      });

      if (response.ok) {
        const updatedTask = await response.json();
        
        // Update in unassigned tasks
        setTasks(prev => prev.map(t => t._id === taskId ? updatedTask : t));
        
        // Update in sections
        setSections(prev => prev.map(section => ({
          ...section,
          tasks: section.tasks ? section.tasks.map(t => t._id === taskId ? updatedTask : t) : []
        })));
        
        setEditingTask(null);
        setEditTaskTitle('');
        setEditTaskPriority('low');
        setEditTaskDueDate('');
    } catch (error) {
      console.error('Error updating task:', error);
  };

  const handleDeleteTask = async (taskId: string) => {
    console.log('üî• handleDeleteTask called with taskId:', taskId);
    
    if (!confirm('Are you sure you want to delete this task?')) {
      console.log('‚ùå User cancelled deletion');
      return;
    
    console.log('üóëÔ∏è Deleting task:', taskId);

    try {
      const response = await fetch(`/api/mongo/tasks?taskId=${taskId}`, {
        method: 'DELETE',
      });

      console.log('üì° Delete API response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Task deleted successfully:', result);
        
        // Remove task from unassigned tasks
        setTasks(prev => {
          const filtered = prev.filter(t => t._id !== taskId);
          console.log('üìã Updated unassigned tasks:', filtered.length);
          return filtered;
        });
        
        // Remove task from sections
        setSections(prev => prev.map(section => {
          const updatedSection = {
            ...section,
            tasks: section.tasks ? section.tasks.filter(t => t._id !== taskId) : []
          };
          console.log('üìã Updated section tasks for', section.name, ':', updatedSection.tasks.length);
          return updatedSection;
        }));

        // Also update projects data to ensure consistency
        setProjects(prev => prev.map(project => {
          if (project._id === selectedProject) {
            return {
              ...project,
              sections: project.sections ? project.sections.map(section => ({
                ...section,
                tasks: section.tasks ? section.tasks.filter(t => t._id !== taskId) : []
              })) : [],
              unassignedTasks: project.unassignedTasks ? project.unassignedTasks.filter(t => t._id !== taskId) : []
            };
          return project;
        }));

        console.log('üîÑ UI state updated after task deletion');
      } else {
        const error = await response.json();
        console.error('‚ùå Failed to delete task:', error);
        alert('Failed to delete task. Please try again.');
    } catch (error) {
      console.error('‚ùå Error deleting task:', error);
      alert('Error deleting task. Please try again.');
  };

  const handleAddSection = async () => {
    if (!newSectionName.trim() || !selectedProject || !session?.user) return;
    
    try {
      const response = await fetch('/api/mongo/sections', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newSectionName.trim(),
          projectId: selectedProject,
          createdById: (session.user as any).id,
          color: newSectionColor;
        }),
      });

      if (response.ok) {
        const newSection = await response.json();
        setSections(prev => [...prev, newSection]);
        setNewSectionName('');
        setShowAddSection(false);
      } else {
        console.error('Failed to create section');
    } catch (error) {
      console.error('Error creating section:', error);
  };

  const handleAddProject = async () => {
    if (!newProjectName.trim() || !session?.user) return;
    
    try {
      const response = await fetch('/api/mongo/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newProjectName.trim(),
          color: newProjectColor,
          icon: newProjectIcon,
          ownerId: (session.user as any).id,
          organizationId: selectedOrganization;
        }),
      });

      if (response.ok) {
        const newProject = await response.json();
        setProjects(prev => [...prev, newProject]);
        setNewProjectName('');
        setNewProjectColor('#3498db');
        setNewProjectIcon('üìÅ');
        setShowProjectModal(false);
        setSelectedProject(newProject._id);
      } else {
        console.error('Failed to create project');
    } catch (error) {
      console.error('Error creating project:', error);
  };

  // Drag and Drop handlers
  // New mouse-based drag and drop handlers
  const handleMouseDown = (event: React.MouseEvent, task: Task) => {
    // Only start drag if clicking on the task body, not buttons
    if ((event.target as HTMLElement).closest('button')) {
      return;
    
    console.log('üñ±Ô∏è Mouse down on task:', task.title);
    setDragStartPosition({ x: event.clientX, y: event.clientY });
    setActiveTask(task);
    setDraggedTask(task);
  };

  // Global mouse move handler
  useEffect(() => {
    const handleGlobalMouseMove = (event: MouseEvent) => {
      if (!dragStartPosition || !activeTask) return;
      
      const distance = Math.sqrt(
        Math.pow(event.clientX - dragStartPosition.x, 2) + 
        Math.pow(event.clientY - dragStartPosition.y, 2)
      );
      
      // Start drag only if mouse moved more than 5 pixels
      if (distance > 5 && !isDragging) {
        console.log('üöÄ Starting drag for task:', activeTask.title);
        setIsDragging(true);
    };

    const handleGlobalMouseUp = async (event: MouseEvent) => {
      if (!activeTask) {
        setActiveTask(null);
        setDraggedTask(null);
        setIsDragging(false);
        setDragStartPosition(null);
        return;

      if (!isDragging) {
        // Mouse up without dragging - just a click, cancel
        console.log('üñ±Ô∏è Mouse up without drag - canceling');
        setActiveTask(null);
        setDraggedTask(null);
        setIsDragging(false);
        setDragStartPosition(null);
        return;

      console.log('üéØ Mouse up - completing drag for task:', activeTask.title);

      // Find drop target
      const dropTarget = document.elementFromPoint(event.clientX, event.clientY);
      if (!dropTarget) {
        console.log('‚ùå No drop target found');
        setActiveTask(null);
        setDraggedTask(null);
        setIsDragging(false);
        setDragStartPosition(null);
        return;

      // Check if dropping on a section or task
      const sectionElement = dropTarget.closest('[data-section-id]');
      const taskElement = dropTarget.closest('[data-task-id]');
      
      let targetSectionId = null;
      
      if (sectionElement) {
        targetSectionId = sectionElement.getAttribute('data-section-id');
        console.log('üìç Dropping on section:', targetSectionId);
      } else if (taskElement) {
        const taskId = taskElement.getAttribute('data-task-id');
        console.log('üìç Dropping on task:', taskId);
        // Find which section this task belongs to
        for (const section of sections) {
          if (section.tasks && section.tasks.some(t => t._id === taskId)) {
            targetSectionId = section._id;
            break;

      if (targetSectionId && targetSectionId !== activeTask.sectionId) {
        console.log('üîÑ Moving task from', activeTask.sectionId, 'to', targetSectionId);
        // Move task to new section
        try {
          const response = await fetch('/api/mongo/tasks', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
              taskId: activeTask._id,
              updates: {
                sectionId: targetSectionId,
                position: 0;
        }),
      });

      if (response.ok) {
            const updatedTask = await response.json();
            console.log('‚úÖ Task moved successfully:', updatedTask);
            
            // Remove from source location
            if (activeTask.sectionId) {
              setSections(prev => prev.map(section => 
                section._id === activeTask.sectionId 
                  ? { ...section, tasks: section.tasks ? section.tasks.filter(t => t._id !== activeTask._id) : [] }
                  : section;
              ));
            } else {
              setTasks(prev => prev.filter(t => t._id !== activeTask._id));
            
            // Add to target location
            setSections(prev => prev.map(section => 
              section._id === targetSectionId 
                ? { ...section, tasks: [...(section.tasks || []), updatedTask] }
                : section;
            ));
          } else {
            console.error('‚ùå Failed to move task');
    } catch (error) {
          console.error('‚ùå Error moving task:', error);
      } else if (targetSectionId === activeTask.sectionId && taskElement) {
        // Reordering within the same section
        const targetTaskId = taskElement.getAttribute('data-task-id');
        if (targetTaskId && targetTaskId !== activeTask._id) {
          console.log('üîÑ Reordering task within same section');
          await handleReorderTask(activeTask._id, targetTaskId, targetSectionId);
        } else {
          console.log('‚ÑπÔ∏è Dropped on same task or invalid target');
      } else {
        console.log('‚ÑπÔ∏è No valid drop target or same section');

      setActiveTask(null);
      setDraggedTask(null);
      setIsDragging(false);
      setDragStartPosition(null);
    };

    if (activeTask) {
      document.addEventListener('mousemove', handleGlobalMouseMove);
      document.addEventListener('mouseup', handleGlobalMouseUp);

    return () => {
      document.removeEventListener('mousemove', handleGlobalMouseMove);
      document.removeEventListener('mouseup', handleGlobalMouseUp);
    };
  }, [activeTask, isDragging, sections, dragStartPosition]);

  // Close section menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (openSectionMenu && !(event.target as Element).closest('.section-menu')) {
        setOpenSectionMenu(null);
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [openSectionMenu]);

  // Removed handleMouseLeave - drag continues even when mouse leaves task area

  // Get tasks organized by date for upcoming view
  const getTasksByDate = () => {
    const allTasks = [...tasks, ...sections.flatMap(section => section.tasks || [])];
    const tasksByDate: { [key: string]: Task[] } = {};
    
    // Get next 7 days
    const today = new Date();
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      const dateKey = date.toISOString().split('T')[0];
      tasksByDate[dateKey] = [];
    
    // Organize tasks by due date
    allTasks.forEach(task => {
      if (task.dueDate) {
        const dueDate = new Date(task.dueDate).toISOString().split('T')[0];
        if (tasksByDate[dueDate]) {
          tasksByDate[dueDate].push(task);
    });
    
    return tasksByDate;
  };

  // Handle section deletion
  const handleDeleteSection = async (sectionId: string) => {
    if (!confirm('Are you sure you want to delete this section? All tasks in this section will be moved to unassigned.')) {
      return;

    try {
      console.log('üóëÔ∏è Deleting section:', sectionId);
      
      const response = await fetch(`/api/mongo/sections`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ sectionId }),
      });

      if (response.ok) {
        console.log('‚úÖ Section deleted successfully');
        
        // Move all tasks from this section to unassigned
        const section = sections.find(s => s._id === sectionId);
        if (section && section.tasks) {
          const movePromises = section.tasks.map(task => 
            fetch('/api/mongo/tasks', {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                taskId: task._id,
                updates: { sectionId: null }
              })
            })
          );
          await Promise.all(movePromises);
        
        // Update local state
        setSections(prev => prev.filter(s => s._id !== sectionId));
        setOpenSectionMenu(null);
        
        // Refresh projects to show moved tasks in unassigned
        await fetchProjects();
      } else {
        console.error('‚ùå Failed to delete section');
        alert('Failed to delete section. Please try again.');
    } catch (error) {
      console.error('‚ùå Error deleting section:', error);
      alert('Error deleting section. Please try again.');
  };

  // Handle task reordering within the same section
  const handleReorderTask = async (draggedTaskId: string, targetTaskId: string, sectionId: string) => {
    try {
      console.log('üîÑ Reordering task:', draggedTaskId, 'before/after:', targetTaskId);
      
      // Get current tasks in the section
      const section = sections.find(s => s._id === sectionId);
      if (!section || !section.tasks) return;
      
      const currentTasks = [...section.tasks];
      const draggedIndex = currentTasks.findIndex(t => t._id === draggedTaskId);
      const targetIndex = currentTasks.findIndex(t => t._id === targetTaskId);
      
      if (draggedIndex === -1 || targetIndex === -1) return;
      
      // Remove dragged task from its current position
      const [draggedTask] = currentTasks.splice(draggedIndex, 1);
      
      // Insert at new position (before the target task)
      currentTasks.splice(targetIndex, 0, draggedTask);
      
      // Update positions in database
      const updatePromises = currentTasks.map((task, index) => 
        fetch('/api/mongo/tasks', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            taskId: task._id,
            updates: { position: index }
          })
        })
      );
      
      await Promise.all(updatePromises);
      
      // Update local state
      setSections(prev => prev.map(section => 
        section._id === sectionId 
          ? { ...section, tasks: currentTasks }
          : section;
      ));
      
      console.log('‚úÖ Task reordered successfully');
    } catch (error) {
      console.error('‚ùå Error reordering task:', error);
  };

  // Organization handlers
  const handleAddOrganization = async () => {
    if (!newOrganizationName.trim() || !session?.user) return;
    
    try {
      const response = await fetch('/api/organizations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newOrganizationName.trim(),
          description: newOrganizationDescription.trim(),
          color: newOrganizationColor,
          icon: newOrganizationIcon,
          ownerId: (session.user as any).id;
        }),
      });

      if (response.ok) {
        const newOrganization = await response.json();
        setOrganizations(prev => [...prev, newOrganization]);
        setNewOrganizationName('');
        setNewOrganizationDescription('');
        setNewOrganizationColor('#667eea');
        setNewOrganizationIcon('üè¢');
        setShowOrganizationModal(false);
        setSelectedOrganization(newOrganization._id);
      } else {
        console.error('Failed to create organization');
    } catch (error) {
      console.error('Error creating organization:', error);
  };

  const handleDeleteOrganization = async (organizationId: string) => {
    if (!confirm('Are you sure you want to delete this organization? This action cannot be undone.')) return;

    try {
      const response = await fetch(`/api/organizations/${organizationId}?userId=${(session?.user as any)?.id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        setOrganizations(prev => prev.filter(o => o._id !== organizationId));
        if (selectedOrganization === organizationId) {
          setSelectedOrganization(organizations.length > 1 ? organizations.find(o => o._id !== organizationId)?._id || null : null);
    } catch (error) {
      console.error('Error deleting organization:', error);
  };

  // Get tasks for a specific section with search and filter
  const getTasksForSection = (sectionId: string) => {
    console.log('üîç Getting tasks for section:', sectionId);
    
    // Find the section and get its tasks
    const section = sections.find(s => s._id === sectionId);
    if (!section || !section.tasks) {
      console.log('üìã No section or tasks found for section:', sectionId);
      return [];
    
    let filteredTasks = section.tasks;
    console.log('üìã Tasks for this section:', filteredTasks);
    
    // Apply search filter
    if (searchQuery.trim()) {
      filteredTasks = filteredTasks.filter(task => 
        task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (task.description && task.description.toLowerCase().includes(searchQuery.toLowerCase()))
      );
    
    // Apply priority filter
    if (filterPriority !== 'all') {
      filteredTasks = filteredTasks.filter(task => task.priority === filterPriority);
    
    // Apply status filter
    if (filterStatus !== 'all') {
      filteredTasks = filteredTasks.filter(task => task.status === filterStatus);
    
    console.log('üìã Final filtered tasks:', filteredTasks);
    return filteredTasks;
  };

  // Get total task count for a project
  const getProjectTaskCount = (projectId: string) => {
    return tasks.filter(task => task.projectId === projectId).length;
  };

  if (loading) {
  return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your projects...</p>
            </div>
          </div>
    );

  if (!session?.user) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Please sign in</h1>
          <p className="text-gray-600">You need to be signed in to access the project manager.</p>
        </div>
      </div>
    );

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="border-b border-gray-200 bg-white">
        <div className="flex items-center justify-between px-6 py-4 header">
          {/* Left: User Avatar & Breadcrumbs */}
          <div className="flex items-center space-x-4 header-left">
            {/* Mobile menu button */}
              <button 
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="mobile-sidebar-toggle p-2 text-gray-600 hover:text-gray-900 lg:hidden"
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
              </button>
            
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                <User className="w-4 h-4 text-gray-600" /></User>
              </div>
              <div className="flex items-center space-x-2">
                <span className="font-medium text-gray-900">
                {session?.user ? (session.user as any).username : 'Guest'}
                  </span>
                <span className="text-gray-400">‚ñº</span>
            </div>
          </div>
            <div className="flex items-center space-x-2 text-sm text-gray-500 breadcrumbs">
              <span>Hamster Hub</span>
              <span>/</span>
              {currentOrganization && (
                <>
                  <span className="font-medium text-gray-900">{currentOrganization.name}</span>
                  <span>/</span>
                </>
              )}
              <span className="font-medium text-gray-900">{currentProject?.name || 'All Tasks'}</span>
        </div>
          </div>

          {/* Right: Actions */}
          <div className="flex items-center space-x-4 header-right">
            <div className="flex items-center space-x-2">
              {/* Real-time indicator */}
              {realtimeUsers.size > 0 && (
                <div className="flex items-center space-x-1 text-xs text-green-600">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="hidden sm:inline">{realtimeUsers.size} user{realtimeUsers.size > 1 ? 's' : ''} online</span>
                </div>
              )}
              {lastUpdate && (
                <div className="text-xs text-gray-500 hidden md:block">
                  Updated {lastUpdate.toLocaleTimeString()}
                </div>
              )}
              <div className="relative">
              <button 
                  onClick={() => setShowNotifications(!showNotifications)}
                  className="p-2 text-gray-400 hover:text-gray-600 relative"
                  <Bell className="w-5 h-5" /></Bell>
                  {unreadCount > 0 && (
                    <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                      {unreadCount > 9 ? '9+' : unreadCount}
                    </span>
                  )}
              </button>
                
                {/* Notifications Dropdown */}
                {showNotifications && (
                  <div className="notifications-dropdown">
                    <div className="p-3 border-b border-gray-200">
                      <div className="flex items-center justify-between">
                        <h3 className="font-semibold text-gray-900">Notifications</h3>
                        {unreadCount > 0 && (
              <button
                            onClick={markAllAsRead}
                            className="text-xs text-blue-600 hover:text-blue-800"
                            Mark all read
              </button>
                        )}
                      </div>
                    </div>
                    <div className="max-h-96 overflow-y-auto">
                      {notifications.length === 0 ? (
                        <div className="p-4 text-center text-gray-500">
                          No notifications
                </div>
              ) : (;
                        notifications.map((notification)} }=> (
                          <div
                            key={notification.id}
                            className={`p-3 border-b border-gray-100 hover:bg-gray-50 cursor-pointer ${
                              !notification.read ? 'bg-blue-50' : '';
                            }`}
                            onClick={() => {
                              markAsRead(notification.id);
                              if (notification.actionUrl) {
                                window.location.href = notification.actionUrl;
                            }}
                            <div className="flex items-start justify-between">
                      <div className="flex-1">
                                <div className="flex items-center space-x-2">
                                  <h4 className="text-sm font-medium text-gray-900">
                                    {notification.title}
                                  </h4>
                                  {!notification.read && (
                                    <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                                  )}
                        </div>
                                <p className="text-sm text-gray-600 mt-1">
                                  {notification.message}
                                </p>
                                <p className="text-xs text-gray-400 mt-1">
                                  {notification.timestamp.toLocaleString()}
                                </p>
                      </div>
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                                  clearNotification(notification.id);
                          }}
                                className="text-gray-400 hover:text-gray-600 ml-2"
                                <span className="text-xs">√ó</span>
                        </button>
                      </div>
                  </div>
                ))
              )}
            </div>
                  </div>
                )}
              </div>
            </div>
            <button className="p-2 text-gray-400 hover:text-gray-600">
              <Share2 className="w-5 h-5" /></Share2>
                </button>
            <div className="flex items-center space-x-2 text-sm text-gray-500">
                  <BarChart3 className="w-4 h-4" /></BarChart3>
              <span>Display: 1</span>;
            </div>
            <button className="p-2 text-gray-400 hover:text-gray-600">
              <MoreHorizontal className="w-5 h-5" /></MoreHorizontal>
                </button>
              </div>
            </div>
      </header>

      <div className="flex main-layout">
        {/* Mobile sidebar overlay */}
        {sidebarOpen && (
          <div 
            className="sidebar-overlay open lg:hidden"
            onClick={() => setSidebarOpen(false)}
          />
        )}
        
        {/* Sidebar */}
        <aside className={`w-64 bg-white border-r border-gray-200 min-h-screen sidebar ${sidebarOpen ? 'open' : ''}`}>
          <div className="p-4">
            {/* Organization Selector */}
            <div className="mb-6">
              <div className="organization-selector">
                <div className="flex items-center space-x-2">
                  <span className="text-lg">{currentOrganization?.icon || 'üè¢'}</span>
                  <span className="font-medium">{currentOrganization?.name || 'Select Organization'}</span>
                </div>
                <button
                  onClick={() => setShowOrganizationDropdown(!showOrganizationDropdown)}
                  className="text-white hover:text-gray-200"
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
                </div>
              
              {/* Organization Dropdown */}
              {showOrganizationDropdown && (
                <div className="organization-dropdown mt-2">
                  {organizations.map((org) => (
                    <div
                      key={org._id}
                      className={`organization-item ${selectedOrganization === org._id ? 'active' : ''}`}
                      onClick={() => {
                        setSelectedOrganization(org._id);
                        setShowOrganizationDropdown(false);
                      }}
                      <div className="flex items-center space-x-2">
                        <span className="text-lg">{org.icon}</span>
                        <div className="flex-1">
                          <div className="font-medium">{org.name}</div>
                          {org.description && (
                            <div className="text-xs text-gray-500">{org.description}</div>
            )}
          </div>
                        <div className="flex space-x-1">
                <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteOrganization(org._id);
                            }}
                            className="p-1 text-gray-400 hover:text-red-600"
                            <Trash2 className="w-3 h-3" /></Trash2>
                </button>
                </div>
                      </div>
                      </div>
                  ))}
                  <div
                    className="organization-item border-t border-gray-200"
                    onClick={() => {
                      setShowOrganizationModal(true);
                      setShowOrganizationDropdown(false);
                    }}
                    <div className="flex items-center space-x-2 text-blue-600">
                      <Plus className="w-4 h-4" /></Plus>
                      <span className="font-medium">Create Organization</span>
                      </div>
                      </div>
                    </div>
              )}
                  </div>

                  {/* Quick Actions */}
            <div className="space-y-2 mb-8">
                <button
                onClick={() => {
                  if (projects.length === 0) {
                    setShowProjectModal(true);
                  } else {
                    // Show quick add task modal or focus on first section
                    if (sections.length > 0) {
                      setSelectedSection(sections[0]._id);
                }}
                className="w-full flex items-center justify-center space-x-2 add-task-btn text-white rounded-full py-3 px-4 transition-colors"
                <Plus className="w-4 h-4" /></Plus>
                <span className="font-medium">Add task</span>
                      </button>
              
              <div className="space-y-1">
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Search tasks..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full px-3 py-2 pl-10 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent search-input"
                  />
                  <Search className="absolute left-3 top-2.5 w-4 h-4 text-gray-400" /></Search>
                </div>
                <button className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                  <Inbox className="w-4 h-4" /></Inbox>
                  <span>Inbox</span>
                  <span className="ml-auto bg-gray-200 text-gray-600 text-xs px-2 py-1 rounded-full">2</span>
                </button>
                <button
                  onClick={() => setCurrentView('kanban')}
                  className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${
                    currentView === 'kanban' 
                      ? 'bg-orange-100 text-orange-700' 
                      : 'text-gray-700 hover:bg-gray-100';
                  }`}
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z" />
                  </svg>
                  <span>Kanban</span>
                      </button>
                <button className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                  <Calendar className="w-4 h-4" /></Calendar>
                  <span>05 Today</span>
                </button>
                <button
                  onClick={() => setCurrentView('upcoming')}
                  className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${
                    currentView === 'upcoming' 
                      ? 'bg-orange-100 text-orange-700' 
                      : 'text-gray-700 hover:bg-gray-100';
                  }`}
                  <Calendar className="w-4 h-4" /></Calendar>
                  <span>Upcoming</span>
                </button>
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
                  <Filter className="w-4 h-4" /></Filter>
                  <span>Filters & Labels</span>
                </button>
                
                {/* Filter Panel */}
                {showFilters && (
                  <div className="mt-2 p-3 bg-gray-50 rounded-lg space-y-3 filter-dropdowns">
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Priority</label>
                      <select
                        value={filterPriority}
                        onChange={(e) => setFilterPriority(e.target.value)}
                        className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-red-500"
                        <option value="all">All Priorities</option>
                        <option value="urgent">Urgent</option>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                      </select>
                      </div>
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Status</label>
                      <select
                        value={filterStatus}
                        onChange={(e) => setFilterStatus(e.target.value)}
                        className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-red-500"
                        <option value="all">All Status</option>
                        <option value="not_started">Not Started</option>
                        <option value="in_progress">In Progress</option>
                        <option value="completed">Completed</option>
                        <option value="on_hold">On Hold</option>
                        <option value="cancelled">Cancelled</option>
                      </select>
                      </div>
                <button
                      onClick={() => {
                        setSearchQuery('');
                        setFilterPriority('all');
                        setFilterStatus('all');
                      }}
                      className="w-full px-2 py-1 text-xs text-gray-600 hover:text-gray-800 transition-colors"
                      Clear Filters
                    </button>
                      </div>
                )}
                <button className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                  <MoreHorizontal className="w-4 h-4" /></MoreHorizontal>
                  <span>More</span>
                </button>
              </div>
            </div>

            {/* My Projects */}
            <div>
              <h3 className="text-sm font-semibold text-gray-500 uppercase tracking-wide mb-3">
                My Projects
                </h3>
                <div className="space-y-1">
                {projects.length > 0 ? (
                  projects.map((project) => (
                  <button
                      key={project._id}
                      onClick={() => setSelectedProject(project._id)}
                      className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors project-item ${
                        selectedProject === project._id 
                          ? 'bg-orange-100 text-orange-700 active' 
                          : 'text-gray-700 hover:bg-gray-100';
                      }`}
                      style={{ '--project-color': project.color } as React.CSSProperties}
                      <Hash className="w-4 h-4" /></Hash>
                      <span className="text-lg">{project.icon}</span>
                      <span className="flex-1 text-left">{project.name}</span>
                      <span className="text-sm text-gray-500">{getProjectTaskCount(project._id)}</span>
                  </button>
                  ))
                ) : (;
                  <div className="text-center py-4">
                    <div className="text-2xl mb-2">üìÅ</div>
                    <p className="text-xs text-gray-500 mb-2">No projects yet</p>
              </div>
            )}
                
                
                  <button
                  onClick={() => setShowProjectModal(true)}
                  className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
                  <Plus className="w-4 h-4" /></Plus>
                  <span>Add project</span>
                  </button>
                    </div>
                  </div>

            {/* Help & Resources */}
            <div className="mt-8">
              <button className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                <HelpCircle className="w-4 h-4" /></HelpCircle>
                <span>Help & resources</span>
                      </button>
                    </div>
                  </div>
        </aside>

        {/* Main Content */}
        <main className="flex-1 p-6">
          {/* Organization Creation Modal */}
          {showOrganizationModal && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="organization-modal">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Create New Organization</h3>
                <div className="organization-form">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Organization Name</label>
                    <input
                      type="text"
                      value={newOrganizationName}
                      onChange={(e) => setNewOrganizationName(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Enter organization name"
                    />
                      </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                    <textarea
                      value={newOrganizationDescription}
                      onChange={(e) => setNewOrganizationDescription(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Enter organization description"
                      rows={3}
                    />
                      </div>
                  <div className="flex space-x-4">
                    <div className="flex-1">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Icon</label>
                      <input
                        type="text"
                        value={newOrganizationIcon}
                        onChange={(e) => setNewOrganizationIcon(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="üè¢"
                      />
                      </div>
                    <div className="flex-1">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Color</label>
                      <input
                        type="color"
                        value={newOrganizationColor}
                        onChange={(e) => setNewOrganizationColor(e.target.value)}
                        className="w-full h-10 border border-gray-300 rounded-lg"
                      />
                    </div>
                  </div>
                </div>
                <div className="organization-actions">
                  <button 
                    onClick={handleAddOrganization}
                    className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                    Create Organization
                    </button>
                    <button
                      onClick={() => {
                      setShowOrganizationModal(false);
                      setNewOrganizationName('');
                      setNewOrganizationDescription('');
                      setNewOrganizationColor('#667eea');
                      setNewOrganizationIcon('üè¢');
                    }}
                    className="flex-1 px-4 py-2 text-gray-500 hover:text-gray-700 transition-colors"
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            )}
          {currentProject ? (
              <div>
              {/* Project Header */}
              <div className="mb-6">
                <h1 className="text-2xl font-bold text-gray-900 mb-2">
                  {currentProject.name}
                </h1>
                <p className="text-gray-500">
                  {tasks.filter(task => task.projectId === currentProject._id).length} tasks
                </p>
              </div>

              {/* Main Content Area */}
              {currentView === 'kanban' ? (
                /* Kanban Board */
                <div className="flex space-x-6 overflow-x-auto kanban-board">
                  {/* Kanban content will be here */}
                </div>
              ) : (;
                /* Upcoming View */
                <div className="upcoming-view">
                  {/* Upcoming content will be here */}
                </div>
              )}
          </div>
    </div>
}
  );