'use client';

import { useState, useEffect, useRef } from 'react';
import { useSession } from 'next-auth/react';
import './project-manager.css';
import { useRealtimeUpdates } from '@/hooks/useRealtimeUpdates';
import { useNotifications } from '@/hooks/useNotifications';
import {
  DndContext,
  DragEndEvent,
  DragOverEvent,
  DragStartEvent,
  DragOverlay,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import {
  useSortable,
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { 
  Plus, 
  Search, 
  Inbox, 
  Calendar, 
  Filter, 
  MoreHorizontal, 
  CheckCircle, 
  Circle, 
  Clock, 
  User, 
  Home, 
  GraduationCap, 
  Target, 
  Hash,
  HelpCircle,
  Bell,
  Share2,
  BarChart3,
  Settings,
  Edit,
  Trash2,
  Archive
} from 'lucide-react';
import { isAdmin } from '@/lib/admin-config';

// Types for our data structures
interface Project {
  _id: string;
  name: string;
  description?: string;
  color: string;
  icon: string;
  ownerId: string;
  members: Array<{
    userId: string;
    role: string;
    joinedAt: string;
  }>;
  createdAt: string;
  updatedAt: string;
}

interface Section {
  _id: string;
  name: string;
  description?: string;
  position: number;
  projectId: string;
  createdById: string;
  isArchived: boolean;
  createdAt: string;
  updatedAt: string;
}

interface Task {
  _id: string;
  title: string;
  description?: string;
  priority: 'P1' | 'P2' | 'P3' | 'P4';
  status: 'not_started' | 'in_progress' | 'completed' | 'on_hold' | 'cancelled';
  dueDate?: string;
  sectionId?: string;
  projectId: string;
  assignedToId?: string;
  createdById: string;
  labels: Array<{
    name: string;
    color: string;
  }>;
  isCompleted: boolean;
  position: number;
  createdAt: string;
  updatedAt: string;
}

interface Organization {
  _id: string;
  name: string;
  description?: string;
  color: string;
  icon: string;
  ownerId: string;
  members: Array<{
    userId: string;
    role: string;
    joinedAt: string;
  }>;
  settings: {
    allowMemberInvites: boolean;
    defaultProjectVisibility: string;
    timezone: string;
  };
  isActive: boolean;
  isArchived: boolean;
  createdAt: string;
  updatedAt: string;
}

export default function ProjectManager() {
  const { data: session } = useSession();
  const [selectedProject, setSelectedProject] = useState<string | null>(null);
  const [projects, setProjects] = useState<Project[]>([]);
  const [sections, setSections] = useState<Section[]>([]);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddTask, setShowAddTask] = useState(false);
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [newTaskPriority, setNewTaskPriority] = useState<string>('P4');
  const [newTaskDueDate, setNewTaskDueDate] = useState('');
  const [selectedSection, setSelectedSection] = useState<string | null>(null);
  const [showAddSection, setShowAddSection] = useState(false);
  const [newSectionName, setNewSectionName] = useState('');
  const [showProjectModal, setShowProjectModal] = useState(false);
  const [newProjectName, setNewProjectName] = useState('');
  const [newProjectColor, setNewProjectColor] = useState('#3498db');
  const [newProjectIcon, setNewProjectIcon] = useState('üìÅ');
  const [searchQuery, setSearchQuery] = useState('');
  const [filterPriority, setFilterPriority] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [showFilters, setShowFilters] = useState(false);
  const [realtimeUsers, setRealtimeUsers] = useState<Set<string>>(new Set());
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  const [showNotifications, setShowNotifications] = useState(false);
  const [editingTask, setEditingTask] = useState<string | null>(null);
  const [editTaskTitle, setEditTaskTitle] = useState('');
  const [editTaskPriority, setEditTaskPriority] = useState<string>('P4');
  const [editTaskDueDate, setEditTaskDueDate] = useState('');
  
  // Organization state
  const [organizations, setOrganizations] = useState<any[]>([]);
  const [selectedOrganization, setSelectedOrganization] = useState<string | null>(null);
  const [showOrganizationModal, setShowOrganizationModal] = useState(false);
  const [showOrganizationDropdown, setShowOrganizationDropdown] = useState(false);
  const [newOrganizationName, setNewOrganizationName] = useState('');
  const [newOrganizationDescription, setNewOrganizationDescription] = useState('');
  const [newOrganizationColor, setNewOrganizationColor] = useState('#667eea');
  const [newOrganizationIcon, setNewOrganizationIcon] = useState('üè¢');
  
  // Mobile responsive state
  const [sidebarOpen, setSidebarOpen] = useState(false);
  
  // Drag and Drop state
  const [activeTask, setActiveTask] = useState<Task | null>(null);
  const [draggedTask, setDraggedTask] = useState<Task | null>(null);
  
  // Notifications
  const { notifications, unreadCount, markAsRead, markAllAsRead, clearNotification } = useNotifications();
  
  // Drag and drop sensors
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const currentProject = projects.find(p => p._id === selectedProject);
  const currentOrganization = organizations.find(o => o._id === selectedOrganization);

  // Fetch organizations for the current user
  const fetchOrganizations = async () => {
    if (!session?.user || !(session.user as any).id) return;
    
    try {
      const response = await fetch(`/api/organizations?userId=${(session.user as any).id}`);
      if (response.ok) {
        const organizationsData = await response.json();
        setOrganizations(organizationsData);
        
        // Auto-select first organization if none selected
        if (!selectedOrganization && organizationsData.length > 0) {
          setSelectedOrganization(organizationsData[0]._id);
        }
      }
    } catch (error) {
      console.error('Error fetching organizations:', error);
    }
  };

  // Sortable Task Component
  const SortableTask = ({ task, onToggle, onEdit, onDelete, isEditing, editTitle, editPriority, editDueDate, onEditChange, onEditSave, onEditCancel }: {
    task: Task;
    onToggle: (id: string) => void;
    onEdit: (id: string) => void;
    onDelete: (id: string) => void;
    isEditing: boolean;
    editTitle: string;
    editPriority: string;
    editDueDate: string;
    onEditChange: (field: string, value: string) => void;
    onEditSave: (id: string) => void;
    onEditCancel: () => void;
  }) => {
    const {
      attributes,
      listeners,
      setNodeRef,
      transform,
      transition,
      isDragging,
    } = useSortable({ id: task._id });

    const style = {
      transform: CSS.Transform.toString(transform),
      transition,
      opacity: isDragging ? 0.5 : 1,
    };

    return (
      <div
        ref={setNodeRef}
        style={style}
        {...attributes}
        {...listeners}
        className="bg-white rounded-lg p-3 border border-gray-200 task-card card-shadow new-task cursor-grab active:cursor-grabbing"
      >
        {isEditing ? (
          <div className="space-y-2">
            <input
              type="text"
              value={editTitle}
              onChange={(e) => onEditChange('title', e.target.value)}
              className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-red-500"
              autoFocus
            />
            <div className="flex space-x-2">
              <select
                value={editPriority}
                onChange={(e) => onEditChange('priority', e.target.value)}
                className="px-2 py-1 text-xs border border-gray-300 rounded"
              >
                <option value="P1">P1 - Urgent</option>
                <option value="P2">P2 - High</option>
                <option value="P3">P3 - Medium</option>
                <option value="P4">P4 - Low</option>
              </select>
              <input
                type="datetime-local"
                value={editDueDate}
                onChange={(e) => onEditChange('dueDate', e.target.value)}
                className="px-2 py-1 text-xs border border-gray-300 rounded"
              />
            </div>
            <div className="flex space-x-1">
              <button
                onClick={() => onEditSave(task._id)}
                className="px-2 py-1 text-xs bg-green-500 text-white rounded hover:bg-green-600"
              >
                Save
              </button>
              <button
                onClick={onEditCancel}
                className="px-2 py-1 text-xs text-gray-500 hover:text-gray-700"
              >
                Cancel
              </button>
            </div>
          </div>
        ) : (
          <div className="flex items-start space-x-3">
            <button
              onClick={() => onToggle(task._id)}
              className="flex-shrink-0 mt-0.5 task-checkbox"
            >
              {task.isCompleted ? (
                <CheckCircle className="w-5 h-5 text-green-500" />
              ) : (
                <Circle className="w-5 h-5 text-gray-400 hover:text-gray-600" />
              )}
            </button>
            <div className="flex-1">
              <div className="flex items-center space-x-2">
                <span className={`text-sm ${task.isCompleted ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                  {task.title}
                </span>
                <span className={`text-xs px-1 py-0.5 rounded ${
                  task.priority === 'P1' ? 'bg-red-100 text-red-800' :
                  task.priority === 'P2' ? 'bg-orange-100 text-orange-800' :
                  task.priority === 'P3' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {task.priority}
                </span>
              </div>
              {task.dueDate && (
                <div className="text-xs text-gray-500 mt-1">
                  Due: {new Date(task.dueDate).toLocaleDateString()}
                </div>
              )}
            </div>
            <div className="flex space-x-1">
              <button
                onClick={() => onEdit(task._id)}
                className="p-1 text-gray-400 hover:text-gray-600"
              >
                <Edit className="w-3 h-3" />
              </button>
              <button
                onClick={() => onDelete(task._id)}
                className="p-1 text-gray-400 hover:text-red-600"
              >
                <Trash2 className="w-3 h-3" />
              </button>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Fetch projects for the current user
  const fetchProjects = async () => {
    if (!session?.user || !(session.user as any).id) return;
    
    try {
      const response = await fetch(`/api/projects?userId=${(session.user as any).id}`);
      if (response.ok) {
        const projectsData = await response.json();
        setProjects(projectsData);
        
        // Auto-select first project if none selected
        if (!selectedProject && projectsData.length > 0) {
          setSelectedProject(projectsData[0]._id);
        }
      }
    } catch (error) {
      console.error('Error fetching projects:', error);
    }
  };

  // Fetch sections for the selected project
  const fetchSections = async () => {
    if (!selectedProject) return;
    
    try {
      const response = await fetch(`/api/sections?projectId=${selectedProject}`);
      if (response.ok) {
        const sectionsData = await response.json();
        setSections(sectionsData);
      }
    } catch (error) {
      console.error('Error fetching sections:', error);
    }
  };

  // Fetch tasks for the selected project
  const fetchTasks = async () => {
    if (!selectedProject) return;
    
    try {
      const response = await fetch(`/api/tasks?projectId=${selectedProject}`);
      if (response.ok) {
        const tasksData = await response.json();
        setTasks(tasksData);
      }
    } catch (error) {
      console.error('Error fetching tasks:', error);
    }
  };

  // Load data on component mount and when project changes
  useEffect(() => {
    if (session?.user && (session.user as any).id) {
      fetchOrganizations();
      fetchProjects();
    }
  }, [session?.user]);

  useEffect(() => {
    if (selectedProject) {
      fetchSections();
      fetchTasks();
    }
  }, [selectedProject]);

  // Set loading to false after initial data load
  useEffect(() => {
    if (projects.length > 0 || !session?.user) {
      setLoading(false);
    }
  }, [projects, session?.user]);

  // Real-time collaboration
  const handleRealtimeUpdate = (update: any) => {
    console.log('üîÑ Real-time update received:', update);
    setLastUpdate(new Date());
    
    switch (update.type) {
      case 'task_created':
      case 'task_updated':
        setTasks(prev => {
          const existing = prev.find(t => t._id === update.data._id);
          if (existing) {
            return prev.map(t => t._id === update.data._id ? update.data : t);
          } else {
            return [...prev, update.data];
          }
        });
        break;
      case 'task_deleted':
        setTasks(prev => prev.filter(t => t._id !== update.data._id));
        break;
      case 'section_created':
      case 'section_updated':
        setSections(prev => {
          const existing = prev.find(s => s._id === update.data._id);
          if (existing) {
            return prev.map(s => s._id === update.data._id ? update.data : s);
          } else {
            return [...prev, update.data];
          }
        });
        break;
      case 'section_deleted':
        setSections(prev => prev.filter(s => s._id !== update.data._id));
        break;
    }
    
    // Track active users
    if (update.userId && update.userId !== (session?.user as any)?.id) {
      setRealtimeUsers(prev => new Set([...prev, update.userId]));
      // Remove user after 30 seconds of inactivity
      setTimeout(() => {
        setRealtimeUsers(prev => {
          const newSet = new Set(prev);
          newSet.delete(update.userId);
          return newSet;
        });
      }, 30000);
    }
  };

  // Enable real-time updates for selected project
  useRealtimeUpdates(selectedProject, handleRealtimeUpdate);

  const handleAddTask = async (sectionId: string) => {
    if (!newTaskTitle.trim() || !selectedProject || !session?.user) return;
    
    try {
      const response = await fetch('/api/tasks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: newTaskTitle.trim(),
          projectId: selectedProject,
          sectionId: sectionId,
          createdById: (session.user as any).id,
          priority: newTaskPriority,
          dueDate: newTaskDueDate || null,
          isCompleted: false
        }),
      });

      if (response.ok) {
        const newTask = await response.json();
        setTasks(prev => [...prev, newTask]);
        setNewTaskTitle('');
        setNewTaskPriority('P4');
        setNewTaskDueDate('');
        setSelectedSection(null);
      } else {
        console.error('Failed to create task');
      }
    } catch (error) {
      console.error('Error creating task:', error);
    }
  };

  const handleToggleTask = async (taskId: string) => {
    const task = tasks.find(t => t._id === taskId);
    if (!task) return;

    try {
      const response = await fetch(`/api/tasks/${taskId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          isCompleted: !task.isCompleted,
          status: !task.isCompleted ? 'completed' : 'not_started'
        }),
      });

      if (response.ok) {
        const updatedTask = await response.json();
        setTasks(prev => prev.map(t => t._id === taskId ? updatedTask : t));
      }
    } catch (error) {
      console.error('Error updating task:', error);
    }
  };

  const handleEditTask = async (taskId: string) => {
    if (!editTaskTitle.trim()) return;

    try {
      const response = await fetch(`/api/tasks/${taskId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: editTaskTitle.trim(),
          priority: editTaskPriority,
          dueDate: editTaskDueDate || null
        }),
      });

      if (response.ok) {
        const updatedTask = await response.json();
        setTasks(prev => prev.map(t => t._id === taskId ? updatedTask : t));
        setEditingTask(null);
        setEditTaskTitle('');
        setEditTaskPriority('P4');
        setEditTaskDueDate('');
      }
    } catch (error) {
      console.error('Error updating task:', error);
    }
  };

  const handleDeleteTask = async (taskId: string) => {
    if (!confirm('Are you sure you want to delete this task?')) return;

    try {
      const response = await fetch(`/api/tasks/${taskId}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        setTasks(prev => prev.filter(t => t._id !== taskId));
      }
    } catch (error) {
      console.error('Error deleting task:', error);
    }
  };

  const handleAddSection = async () => {
    if (!newSectionName.trim() || !selectedProject || !session?.user) return;
    
    try {
      const response = await fetch('/api/sections', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newSectionName.trim(),
          projectId: selectedProject,
          createdById: (session.user as any).id
        }),
      });

      if (response.ok) {
        const newSection = await response.json();
        setSections(prev => [...prev, newSection]);
        setNewSectionName('');
        setShowAddSection(false);
      } else {
        console.error('Failed to create section');
      }
    } catch (error) {
      console.error('Error creating section:', error);
    }
  };

  const handleAddProject = async () => {
    if (!newProjectName.trim() || !session?.user) return;
    
    try {
      const response = await fetch('/api/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newProjectName.trim(),
          color: newProjectColor,
          icon: newProjectIcon,
          ownerId: (session.user as any).id
        }),
      });

      if (response.ok) {
        const newProject = await response.json();
        setProjects(prev => [...prev, newProject]);
        setNewProjectName('');
        setNewProjectColor('#3498db');
        setNewProjectIcon('üìÅ');
        setShowProjectModal(false);
        setSelectedProject(newProject._id);
      } else {
        console.error('Failed to create project');
      }
    } catch (error) {
      console.error('Error creating project:', error);
    }
  };

  // Drag and Drop handlers
  const handleDragStart = (event: DragStartEvent) => {
    const { active } = event;
    const task = tasks.find(t => t._id === active.id);
    setActiveTask(task || null);
    setDraggedTask(task || null);
  };

  const handleDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event;
    
    if (!over || !activeTask) {
      setActiveTask(null);
      setDraggedTask(null);
      return;
    }

    const activeId = active.id as string;
    const overId = over.id as string;
    
    // Find the task being dragged
    const draggedTask = tasks.find(t => t._id === activeId);
    if (!draggedTask) return;

    // Check if dropping on a section or another task
    const overSection = sections.find(s => s._id === overId);
    const overTask = tasks.find(t => t._id === overId);
    
    let newSectionId = draggedTask.sectionId;
    let newPosition = draggedTask.position;
    
    if (overSection) {
      // Dropping on a section - move to end of that section
      newSectionId = overSection._id;
      const sectionTasks = tasks.filter(t => t.sectionId === overSection._id);
      newPosition = sectionTasks.length;
    } else if (overTask) {
      // Dropping on another task - insert at that position
      newSectionId = overTask.sectionId;
      newPosition = overTask.position;
    }

    // Update task position via API
    try {
      const response = await fetch('/api/tasks/reorder', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          taskId: activeId,
          newPosition,
          newSectionId,
          projectId: selectedProject
        }),
      });

      if (response.ok) {
        // Update local state
        setTasks(prev => {
          const newTasks = [...prev];
          const taskIndex = newTasks.findIndex(t => t._id === activeId);
          if (taskIndex !== -1) {
            newTasks[taskIndex] = {
              ...newTasks[taskIndex],
              sectionId: newSectionId,
              position: newPosition
            };
          }
          return newTasks;
        });
      }
    } catch (error) {
      console.error('Error reordering task:', error);
    }

    setActiveTask(null);
    setDraggedTask(null);
  };

  // Organization handlers
  const handleAddOrganization = async () => {
    if (!newOrganizationName.trim() || !session?.user) return;
    
    try {
      const response = await fetch('/api/organizations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newOrganizationName.trim(),
          description: newOrganizationDescription.trim(),
          color: newOrganizationColor,
          icon: newOrganizationIcon,
          ownerId: (session.user as any).id
        }),
      });

      if (response.ok) {
        const newOrganization = await response.json();
        setOrganizations(prev => [...prev, newOrganization]);
        setNewOrganizationName('');
        setNewOrganizationDescription('');
        setNewOrganizationColor('#667eea');
        setNewOrganizationIcon('üè¢');
        setShowOrganizationModal(false);
        setSelectedOrganization(newOrganization._id);
      } else {
        console.error('Failed to create organization');
      }
    } catch (error) {
      console.error('Error creating organization:', error);
    }
  };

  const handleDeleteOrganization = async (organizationId: string) => {
    if (!confirm('Are you sure you want to delete this organization? This action cannot be undone.')) return;

    try {
      const response = await fetch(`/api/organizations/${organizationId}?userId=${(session?.user as any)?.id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        setOrganizations(prev => prev.filter(o => o._id !== organizationId));
        if (selectedOrganization === organizationId) {
          setSelectedOrganization(organizations.length > 1 ? organizations.find(o => o._id !== organizationId)?._id || null : null);
        }
      }
    } catch (error) {
      console.error('Error deleting organization:', error);
    }
  };

  // Get tasks for a specific section with search and filter
  const getTasksForSection = (sectionId: string) => {
    let filteredTasks = tasks.filter(task => task.sectionId === sectionId);
    
    // Apply search filter
    if (searchQuery.trim()) {
      filteredTasks = filteredTasks.filter(task => 
        task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (task.description && task.description.toLowerCase().includes(searchQuery.toLowerCase()))
      );
    }
    
    // Apply priority filter
    if (filterPriority !== 'all') {
      filteredTasks = filteredTasks.filter(task => task.priority === filterPriority);
    }
    
    // Apply status filter
    if (filterStatus !== 'all') {
      filteredTasks = filteredTasks.filter(task => task.status === filterStatus);
    }
    
    return filteredTasks;
  };

  // Get total task count for a project
  const getProjectTaskCount = (projectId: string) => {
    return tasks.filter(task => task.projectId === projectId).length;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your projects...</p>
        </div>
      </div>
    );
  }

  if (!session?.user) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Please sign in</h1>
          <p className="text-gray-600">You need to be signed in to access the project manager.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="border-b border-gray-200 bg-white">
        <div className="flex items-center justify-between px-6 py-4 header">
          {/* Left: User Avatar & Breadcrumbs */}
          <div className="flex items-center space-x-4 header-left">
            {/* Mobile menu button */}
            <button 
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="mobile-sidebar-toggle p-2 text-gray-600 hover:text-gray-900 lg:hidden"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
            
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                <User className="w-4 h-4 text-gray-600" />
              </div>
              <div className="flex items-center space-x-2">
                <span className="font-medium text-gray-900">
                  {session?.user ? (session.user as any).username : 'Guest'}
                </span>
                <span className="text-gray-400">‚ñº</span>
              </div>
            </div>
            <div className="flex items-center space-x-2 text-sm text-gray-500">
              <span>Hamster Hub</span>
              <span>/</span>
              {currentOrganization && (
                <>
                  <span className="font-medium text-gray-900">{currentOrganization.name}</span>
                  <span>/</span>
                </>
              )}
              <span className="font-medium text-gray-900">{currentProject?.name || 'All Tasks'}</span>
            </div>
          </div>

          {/* Right: Actions */}
          <div className="flex items-center space-x-4 header-right">
            <div className="flex items-center space-x-2">
              {/* Real-time indicator */}
              {realtimeUsers.size > 0 && (
                <div className="flex items-center space-x-1 text-xs text-green-600">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="hidden sm:inline">{realtimeUsers.size} user{realtimeUsers.size > 1 ? 's' : ''} online</span>
                </div>
              )}
              {lastUpdate && (
                <div className="text-xs text-gray-500 hidden md:block">
                  Updated {lastUpdate.toLocaleTimeString()}
                </div>
              )}
              <div className="relative">
                <button 
                  onClick={() => setShowNotifications(!showNotifications)}
                  className="p-2 text-gray-400 hover:text-gray-600 relative"
                >
                  <Bell className="w-5 h-5" />
                  {unreadCount > 0 && (
                    <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                      {unreadCount > 9 ? '9+' : unreadCount}
                    </span>
                  )}
                </button>
                
                {/* Notifications Dropdown */}
                {showNotifications && (
                  <div className="absolute right-0 top-full mt-2 w-80 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
                    <div className="p-3 border-b border-gray-200">
                      <div className="flex items-center justify-between">
                        <h3 className="font-semibold text-gray-900">Notifications</h3>
                        {unreadCount > 0 && (
                          <button
                            onClick={markAllAsRead}
                            className="text-xs text-blue-600 hover:text-blue-800"
                          >
                            Mark all read
                          </button>
                        )}
                      </div>
                    </div>
                    <div className="max-h-96 overflow-y-auto">
                      {notifications.length === 0 ? (
                        <div className="p-4 text-center text-gray-500">
                          No notifications
                        </div>
                      ) : (
                        notifications.map((notification) => (
                          <div
                            key={notification.id}
                            className={`p-3 border-b border-gray-100 hover:bg-gray-50 cursor-pointer ${
                              !notification.read ? 'bg-blue-50' : ''
                            }`}
                            onClick={() => {
                              markAsRead(notification.id);
                              if (notification.actionUrl) {
                                window.location.href = notification.actionUrl;
                              }
                            }}
                          >
                            <div className="flex items-start justify-between">
                              <div className="flex-1">
                                <div className="flex items-center space-x-2">
                                  <h4 className="text-sm font-medium text-gray-900">
                                    {notification.title}
                                  </h4>
                                  {!notification.read && (
                                    <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                                  )}
                                </div>
                                <p className="text-sm text-gray-600 mt-1">
                                  {notification.message}
                                </p>
                                <p className="text-xs text-gray-400 mt-1">
                                  {notification.timestamp.toLocaleString()}
                                </p>
                              </div>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  clearNotification(notification.id);
                                }}
                                className="text-gray-400 hover:text-gray-600 ml-2"
                              >
                                <span className="text-xs">√ó</span>
                              </button>
                            </div>
                          </div>
                        ))
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>
            <button className="p-2 text-gray-400 hover:text-gray-600">
              <Share2 className="w-5 h-5" />
            </button>
            <div className="flex items-center space-x-2 text-sm text-gray-500">
              <BarChart3 className="w-4 h-4" />
              <span>Display: 1</span>
            </div>
            <button className="p-2 text-gray-400 hover:text-gray-600">
              <MoreHorizontal className="w-5 h-5" />
              </button>
          </div>
        </div>
      </header>

      <div className="flex main-layout">
        {/* Mobile sidebar overlay */}
        {sidebarOpen && (
          <div 
            className="sidebar-overlay open lg:hidden"
            onClick={() => setSidebarOpen(false)}
          />
        )}
        
        {/* Sidebar */}
        <aside className={`w-64 bg-white border-r border-gray-200 min-h-screen sidebar ${sidebarOpen ? 'open' : ''}`}>
          <div className="p-4">
            {/* Organization Selector */}
            <div className="mb-6">
              <div className="organization-selector">
                <div className="flex items-center space-x-2">
                  <span className="text-lg">{currentOrganization?.icon || 'üè¢'}</span>
                  <span className="font-medium">{currentOrganization?.name || 'Select Organization'}</span>
                </div>
                <button 
                  onClick={() => setShowOrganizationDropdown(!showOrganizationDropdown)}
                  className="text-white hover:text-gray-200"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
              </div>
              
              {/* Organization Dropdown */}
              {showOrganizationDropdown && (
                <div className="organization-dropdown mt-2">
                  {organizations.map((org) => (
                    <div
                      key={org._id}
                      className={`organization-item ${selectedOrganization === org._id ? 'active' : ''}`}
                      onClick={() => {
                        setSelectedOrganization(org._id);
                        setShowOrganizationDropdown(false);
                      }}
                    >
                      <div className="flex items-center space-x-2">
                        <span className="text-lg">{org.icon}</span>
                        <div className="flex-1">
                          <div className="font-medium">{org.name}</div>
                          {org.description && (
                            <div className="text-xs text-gray-500">{org.description}</div>
                          )}
                        </div>
                        <div className="flex space-x-1">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteOrganization(org._id);
                            }}
                            className="p-1 text-gray-400 hover:text-red-600"
                          >
                            <Trash2 className="w-3 h-3" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                  <div
                    className="organization-item border-t border-gray-200"
                    onClick={() => {
                      setShowOrganizationModal(true);
                      setShowOrganizationDropdown(false);
                    }}
                  >
                    <div className="flex items-center space-x-2 text-blue-600">
                      <Plus className="w-4 h-4" />
                      <span className="font-medium">Create Organization</span>
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            {/* Quick Actions */}
            <div className="space-y-2 mb-8">
              <button 
                onClick={() => {
                  if (projects.length === 0) {
                    setShowProjectModal(true);
                  } else {
                    // Show quick add task modal or focus on first section
                    if (sections.length > 0) {
                      setSelectedSection(sections[0]._id);
                    }
                  }
                }}
                className="w-full flex items-center justify-center space-x-2 add-task-btn text-white rounded-full py-3 px-4 transition-colors"
              >
                <Plus className="w-4 h-4" />
                <span className="font-medium">Add task</span>
              </button>
              
              <div className="space-y-1">
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Search tasks..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full px-3 py-2 pl-10 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  />
                  <Search className="absolute left-3 top-2.5 w-4 h-4 text-gray-400" />
                </div>
                <button className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                  <Inbox className="w-4 h-4" />
                  <span>Inbox</span>
                  <span className="ml-auto bg-gray-200 text-gray-600 text-xs px-2 py-1 rounded-full">2</span>
                </button>
                <button className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                  <Calendar className="w-4 h-4" />
                  <span>05 Today</span>
                </button>
                <button className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                  <Calendar className="w-4 h-4" />
                  <span>Upcoming</span>
                </button>
                <button 
                  onClick={() => setShowFilters(!showFilters)}
                  className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <Filter className="w-4 h-4" />
                  <span>Filters & Labels</span>
                </button>
                
                {/* Filter Panel */}
                {showFilters && (
                  <div className="mt-2 p-3 bg-gray-50 rounded-lg space-y-3">
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Priority</label>
                      <select
                        value={filterPriority}
                        onChange={(e) => setFilterPriority(e.target.value)}
                        className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-red-500"
                      >
                        <option value="all">All Priorities</option>
                        <option value="P1">P1 - Urgent</option>
                        <option value="P2">P2 - High</option>
                        <option value="P3">P3 - Medium</option>
                        <option value="P4">P4 - Low</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">Status</label>
                      <select
                        value={filterStatus}
                        onChange={(e) => setFilterStatus(e.target.value)}
                        className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-red-500"
                      >
                        <option value="all">All Status</option>
                        <option value="not_started">Not Started</option>
                        <option value="in_progress">In Progress</option>
                        <option value="completed">Completed</option>
                        <option value="on_hold">On Hold</option>
                        <option value="cancelled">Cancelled</option>
                      </select>
                    </div>
                    <button
                      onClick={() => {
                        setSearchQuery('');
                        setFilterPriority('all');
                        setFilterStatus('all');
                      }}
                      className="w-full px-2 py-1 text-xs text-gray-600 hover:text-gray-800 transition-colors"
                    >
                      Clear Filters
                    </button>
                  </div>
                )}
                <button className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                  <MoreHorizontal className="w-4 h-4" />
                  <span>More</span>
                </button>
              </div>
            </div>

            {/* My Projects */}
            <div>
              <h3 className="text-sm font-semibold text-gray-500 uppercase tracking-wide mb-3">
                My Projects
                </h3>
                <div className="space-y-1">
                {projects.length > 0 ? (
                  projects.map((project) => (
                    <button
                      key={project._id}
                      onClick={() => setSelectedProject(project._id)}
                      className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors project-item ${
                        selectedProject === project._id 
                          ? 'bg-orange-100 text-orange-700 active' 
                          : 'text-gray-700 hover:bg-gray-100'
                      }`}
                      style={{ '--project-color': project.color } as React.CSSProperties}
                    >
                      <Hash className="w-4 h-4" />
                      <span className="text-lg">{project.icon}</span>
                      <span className="flex-1 text-left">{project.name}</span>
                      <span className="text-sm text-gray-500">{getProjectTaskCount(project._id)}</span>
                    </button>
                  ))
                ) : (
                  <div className="text-center py-4">
                    <div className="text-2xl mb-2">üìÅ</div>
                    <p className="text-xs text-gray-500 mb-2">No projects yet</p>
                  </div>
                )}
                
                <div className="mt-2 text-xs text-gray-500">
                  <span>Hamster H...</span>
                  <span className="ml-2">USED: {projects.length}/5</span>
                </div>
                
                  <button
                  onClick={() => setShowProjectModal(true)}
                  className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                  <Plus className="w-4 h-4" />
                  <span>Add project</span>
                  </button>
                    </div>
                  </div>

            {/* Help & Resources */}
            <div className="mt-8">
              <button className="w-full flex items-center space-x-3 px-3 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                <HelpCircle className="w-4 h-4" />
                <span>Help & resources</span>
                      </button>
                    </div>
                  </div>
        </aside>

        {/* Main Content */}
        <main className="flex-1 p-6">
          {/* Organization Creation Modal */}
          {showOrganizationModal && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="organization-modal">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Create New Organization</h3>
                <div className="organization-form">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Organization Name</label>
                    <input
                      type="text"
                      value={newOrganizationName}
                      onChange={(e) => setNewOrganizationName(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Enter organization name"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                    <textarea
                      value={newOrganizationDescription}
                      onChange={(e) => setNewOrganizationDescription(e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Enter organization description"
                      rows={3}
                    />
                  </div>
                  <div className="flex space-x-4">
                    <div className="flex-1">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Icon</label>
                      <input
                        type="text"
                        value={newOrganizationIcon}
                        onChange={(e) => setNewOrganizationIcon(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="üè¢"
                      />
                    </div>
                    <div className="flex-1">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Color</label>
                      <input
                        type="color"
                        value={newOrganizationColor}
                        onChange={(e) => setNewOrganizationColor(e.target.value)}
                        className="w-full h-10 border border-gray-300 rounded-lg"
                      />
                    </div>
                  </div>
                </div>
                <div className="organization-actions">
                  <button 
                    onClick={handleAddOrganization}
                    className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                  >
                    Create Organization
                  </button>
                  <button 
                    onClick={() => {
                      setShowOrganizationModal(false);
                      setNewOrganizationName('');
                      setNewOrganizationDescription('');
                      setNewOrganizationColor('#667eea');
                      setNewOrganizationIcon('üè¢');
                    }}
                    className="flex-1 px-4 py-2 text-gray-500 hover:text-gray-700 transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          )}
          {currentProject ? (
              <div>
              {/* Project Header */}
              <div className="mb-6">
                <h1 className="text-2xl font-bold text-gray-900 mb-2">
                  {currentProject.name}
                </h1>
                <p className="text-gray-500">
                  {tasks.filter(task => task.projectId === currentProject._id).length} tasks
                </p>
              </div>

              {/* Kanban Board */}
              <DndContext
                sensors={sensors}
                collisionDetection={closestCenter}
                onDragStart={handleDragStart}
                onDragEnd={handleDragEnd}
              >
                <div className="flex space-x-6 overflow-x-auto kanban-board">
                {sections.map((section) => {
                  const sectionTasks = getTasksForSection(section._id);
                  return (
                    <div key={section._id} className="flex-shrink-0 w-80">
                      <div className="section-column p-4 min-h-96">
                        {/* Section Header */}
                        <div className="flex items-center justify-between mb-4">
                          <h3 className="font-semibold text-gray-900">{section.name}</h3>
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-gray-500">{sectionTasks.length}</span>
                            <button className="p-1 text-gray-400 hover:text-gray-600">
                              <MoreHorizontal className="w-4 h-4" />
                </button>
              </div>
            </div>

                        {/* Tasks */}
                        <SortableContext items={sectionTasks.map(t => t._id)} strategy={verticalListSortingStrategy}>
                          <div className="space-y-2 mb-4">
                            {sectionTasks.map((task) => (
                              <SortableTask
                                key={task._id}
                                task={task}
                                onToggle={handleToggleTask}
                                onEdit={(id) => {
                                  setEditingTask(id);
                                  setEditTaskTitle(task.title);
                                  setEditTaskPriority(task.priority);
                                  setEditTaskDueDate(task.dueDate ? new Date(task.dueDate).toISOString().slice(0, 16) : '');
                                }}
                                onDelete={handleDeleteTask}
                                isEditing={editingTask === task._id}
                                editTitle={editTaskTitle}
                                editPriority={editTaskPriority}
                                editDueDate={editTaskDueDate}
                                onEditChange={(field, value) => {
                                  if (field === 'title') setEditTaskTitle(value);
                                  if (field === 'priority') setEditTaskPriority(value);
                                  if (field === 'dueDate') setEditTaskDueDate(value);
                                }}
                                onEditSave={handleEditTask}
                                onEditCancel={() => {
                                  setEditingTask(null);
                                  setEditTaskTitle('');
                                  setEditTaskPriority('P4');
                                  setEditTaskDueDate('');
                                }}
                              />
                            ))}
                          </div>
                        </SortableContext>

                        {/* Add Task Button */}
                        {selectedSection === section._id ? (
                        <div className="space-y-2">
                        <input
                        type="text"
                        placeholder="Task name"
                        value={newTaskTitle}
                        onChange={(e) => setNewTaskTitle(e.target.value)}
                        onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                        handleAddTask(section._id);
                        }
                        }}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent text-sm task-input"
                        autoFocus
                        />
                        <div className="flex space-x-2">
                        <select
                        value={newTaskPriority}
                        onChange={(e) => setNewTaskPriority(e.target.value)}
                          className="px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-red-500"
                        >
                          <option value="P1">P1 - Urgent</option>
                          <option value="P2">P2 - High</option>
                        <option value="P3">P3 - Medium</option>
                        <option value="P4">P4 - Low</option>
                        </select>
                        <input
                        type="datetime-local"
                          value={newTaskDueDate}
                        onChange={(e) => setNewTaskDueDate(e.target.value)}
                          className="px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-red-500"
                            placeholder="Due date"
                            />
                            </div>
                            <div className="flex space-x-2">
                              <button
                                onClick={() => handleAddTask(section._id)}
                                className="px-3 py-1 bg-red-500 text-white text-sm rounded hover:bg-red-600 transition-colors"
                              >
                                Add task
                              </button>
                              <button
                                onClick={() => {
                                  setSelectedSection(null);
                                  setNewTaskTitle('');
                                  setNewTaskPriority('P4');
                                  setNewTaskDueDate('');
                                }}
                                className="px-3 py-1 text-gray-500 text-sm hover:text-gray-700 transition-colors"
                              >
                                Cancel
                              </button>
                            </div>
                          </div>
                        ) : (
                    <button
                            onClick={() => setSelectedSection(section._id)}
                            className="w-full flex items-center space-x-2 text-gray-500 hover:text-gray-700 py-2 transition-colors"
                    >
                            <Plus className="w-4 h-4" />
                            <span className="text-sm">Add task</span>
                    </button>
                        )}
                  </div>
                </div>
                  );
                })}
                </div>
                
                {/* Drag Overlay */}
                <DragOverlay>
                  {activeTask ? (
                    <div className="bg-white rounded-lg p-3 border border-gray-200 task-card card-shadow new-task opacity-90 rotate-3">
                      <div className="flex items-start space-x-3">
                        <div className="flex-shrink-0 mt-0.5">
                          {activeTask.isCompleted ? (
                            <CheckCircle className="w-5 h-5 text-green-500" />
                          ) : (
                            <Circle className="w-5 h-5 text-gray-400" />
                          )}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2">
                            <span className={`text-sm ${activeTask.isCompleted ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                              {activeTask.title}
                            </span>
                            <span className={`text-xs px-1 py-0.5 rounded ${
                              activeTask.priority === 'P1' ? 'bg-red-100 text-red-800' :
                              activeTask.priority === 'P2' ? 'bg-orange-100 text-orange-800' :
                              activeTask.priority === 'P3' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-gray-100 text-gray-800'
                            }`}>
                              {activeTask.priority}
                            </span>
                          </div>
                          {activeTask.dueDate && (
                            <div className="text-xs text-gray-500 mt-1">
                              Due: {new Date(activeTask.dueDate).toLocaleDateString()}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ) : null}
                </DragOverlay>
              </DndContext>

                {/* Add Section Button */}
                {showAddSection ? (
                  <div className="flex-shrink-0 w-80">
                    <div className="bg-gray-50 rounded-lg p-4 min-h-96">
                    <input
                      type="text"
                        placeholder="Section name"
                        value={newSectionName}
                        onChange={(e) => setNewSectionName(e.target.value)}
                        onKeyPress={(e) => {
                          if (e.key === 'Enter') {
                            handleAddSection();
                          }
                        }}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent text-sm mb-4"
                      autoFocus
                    />
                      <div className="flex space-x-2">
                          <button 
                          onClick={handleAddSection}
                          className="px-3 py-1 bg-red-500 text-white text-sm rounded hover:bg-red-600 transition-colors"
                          >
                          Add section
                          </button>
                    <button
                      onClick={() => {
                            setShowAddSection(false);
                            setNewSectionName('');
                      }}
                          className="px-3 py-1 text-gray-500 text-sm hover:text-gray-700 transition-colors"
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
                ) : (
                      <button
                    onClick={() => setShowAddSection(true)}
                    className="flex-shrink-0 w-80 bg-gray-100 hover:bg-gray-200 rounded-lg p-4 min-h-96 flex items-center justify-center transition-colors"
                  >
                    <div className="flex items-center space-x-2 text-gray-500">
                      <Plus className="w-4 h-4" />
                      <span className="text-sm">Add section</span>
                        </div>
                    </button>
                          )}
                        </div>
                      </div>
                </div>
              ) : (
                /* Upcoming View */
                <div className="upcoming-view">
                  <div className="mb-6">
                    <h2 className="text-2xl font-bold text-gray-900 mb-2">Upcoming</h2>
                    <div className="flex items-center space-x-4">
                      <div className="text-lg font-medium text-gray-700">
                        {new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex space-x-6 overflow-x-auto">
                    <div className="flex-shrink-0 w-80">
                      <div className="bg-gray-50 rounded-lg p-4 min-h-96">
                        <div className="flex items-center justify-between mb-4">
                          <h3 className="font-semibold text-gray-900">Today</h3>
                          <span className="text-sm text-gray-500">0</span>
                        </div>
                        <p className="text-gray-500">Upcoming view content will be implemented here.</p>
                      </div>
                    </div>
                  </div>
                </div>
              )}
          ) : projects.length === 0 ? (
          <div className="flex items-center justify-center h-96">
          <div className="text-center">
          <div className="text-6xl mb-4">üìã</div>
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">Welcome to your Project Manager!</h2>
          <p className="text-gray-500 mb-6">Get started by creating your first project to organize your tasks.</p>
          <button
          onClick={() => setShowProjectModal(true)}
            className="px-6 py-3 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors font-medium"
          >
            Create Your First Project
            </button>
            </div>
            </div>
          ) : (
            <div className="flex items-center justify-center h-96">
              <div className="text-center">
                <h2 className="text-xl font-semibold text-gray-900 mb-2">No project selected</h2>
                <p className="text-gray-500 mb-4">Select a project from the sidebar to view its tasks.</p>
                <button
                  onClick={() => setSelectedProject(projects[0]._id)}
                  className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                >
                  Select First Project
                </button>
              </div>
            </div>
          )}
        </main>
                  </div>

      {/* Project Creation Modal */}
      {showProjectModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-96">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Create New Project</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Project Name</label>
                <input
                  type="text"
                  value={newProjectName}
                  onChange={(e) => setNewProjectName(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  placeholder="Enter project name"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Icon</label>
                <input
                  type="text"
                  value={newProjectIcon}
                  onChange={(e) => setNewProjectIcon(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  placeholder="üìÅ"
                />
                </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Color</label>
                <input
                  type="color"
                  value={newProjectColor}
                  onChange={(e) => setNewProjectColor(e.target.value)}
                  className="w-full h-10 border border-gray-300 rounded-lg"
                />
              </div>
            </div>
            <div className="flex space-x-3 mt-6">
                      <button 
                onClick={handleAddProject}
                className="flex-1 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                      >
                        Create Project
                      </button>
                    <button 
                onClick={() => {
                  setShowProjectModal(false);
                  setNewProjectName('');
                  setNewProjectColor('#3498db');
                  setNewProjectIcon('üìÅ');
                }}
                className="flex-1 px-4 py-2 text-gray-500 hover:text-gray-700 transition-colors"
              >
                Cancel
                    </button>
                  </div>
          </div>
              </div>
            )}
    </div>
  );
}