name: Business Empire App Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd /root/projects/business-empire
        npm ci
        
    - name: Install Playwright
      run: |
        cd /root/projects/business-empire
        npx playwright install chromium
        
    - name: Build application
      run: |
        cd /root/projects/business-empire
        npm run build
        
    - name: Start application
      run: |
        cd /root/projects/business-empire
        npm start &
        sleep 10
        
    - name: Run API tests
      run: |
        cd /root/projects/business-empire
        npm run test
        
    - name: Run browser tests
      run: |
        cd /root/projects/business-empire
        npm run test:browser
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          /root/projects/business-empire/test-report.json
          /root/projects/business-empire/browser-test-report.json
          /root/projects/business-empire/combined-test-report.json
          
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const report = JSON.parse(fs.readFileSync('/root/projects/business-empire/combined-test-report.json', 'utf8'));
            const summary = report.summary;
            
            const comment = `## üß™ Test Results
            
            **Total Tests:** ${summary.totalTests}
            **Passed:** ${summary.passedTests} ‚úÖ
            **Failed:** ${summary.failedTests} ‚ùå
            **Success Rate:** ${((summary.passedTests / summary.totalTests) * 100).toFixed(1)}%
            
            [View detailed reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read test report:', error);
          }
